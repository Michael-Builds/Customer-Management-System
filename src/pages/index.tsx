import { Inter } from "next/font/google"
import Head from "next/head"
import { lazy, Suspense, useCallback, useEffect, useState } from "react"
import NoInternetConnection from "@/components/Network/Network"
import { useRouter } from "next/router"
const inter = Inter({ subsets: ["latin"] })

const PageLayout = lazy(() => import("@/components/Auth/PageLayout"))
const Login = lazy(() => import("@/components/Login/Login"))
const Signup = lazy(() => import("@/components/Signup/Signup"))
const LockScreen = lazy(() => import("@/components/LockScreen/LockScreen"))

export default function Home() {
  const router = useRouter()

  const [isOnline, setIsOnline] = useState(
    typeof window !== "undefined" ? navigator.onLine : true
  )

  const [isAuthenticated, setIsAuthenticated] = useState(false)

  useEffect(() => {
    const handleOnline = () => {
      setIsOnline(true)
    }

    const handleOffline = () => {
      setIsOnline(false)
    }

    window.addEventListener("online", handleOnline)
    window.addEventListener("offline", handleOffline)

    return () => {
      window.removeEventListener("online", handleOnline)
      window.removeEventListener("offline", handleOffline)
    }
  })

  const handleSetIsAuthenticated = useCallback(
    (value: boolean) => {
      setIsAuthenticated(value)
    },
    [setIsAuthenticated]
  )

  const renderAuthComponent = () => {
    const { pathname } = router
    switch (pathname) {
      case "/login":
        return <Login setIsAuthenticated={handleSetIsAuthenticated} />
      case "/signup":
        return <Signup setIsAuthenticated={handleSetIsAuthenticated} />
      case "/lockscreen":
        return <LockScreen setIsAuthenticated={handleSetIsAuthenticated} />
      default:
        return <Login setIsAuthenticated={handleSetIsAuthenticated} />
    }
  }

  return (
    <>
      <Head>
        <title>Kemsey Store</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={`flex min-h-screen bg-white w-full flex-col items-center justify-between ${inter.className}`}
      >
        {isOnline ? (
          isAuthenticated ? (
            <Suspense fallback={<div>Loading...</div>}>
              <PageLayout />
            </Suspense>
          ) : (
            <Suspense fallback={<div>Loading...</div>}>
              {renderAuthComponent()}
            </Suspense>
          )
        ) : (
          <NoInternetConnection />
        )}
      </main>
    </>
  )
}
